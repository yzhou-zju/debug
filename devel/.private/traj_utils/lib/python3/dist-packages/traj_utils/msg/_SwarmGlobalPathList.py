# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from traj_utils/SwarmGlobalPathList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SwarmGlobalPathList(genpy.Message):
  _md5sum = "015139dac170a0f9242e5a66432e43ee"
  _type = "traj_utils/SwarmGlobalPathList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 guard_drone_id
int16 path_num

float32[] swarm_global_path_x
float32[] swarm_global_path_y
float32[] swarm_global_path_z
float32[] swarm_global_path_scale
"""
  __slots__ = ['guard_drone_id','path_num','swarm_global_path_x','swarm_global_path_y','swarm_global_path_z','swarm_global_path_scale']
  _slot_types = ['int16','int16','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       guard_drone_id,path_num,swarm_global_path_x,swarm_global_path_y,swarm_global_path_z,swarm_global_path_scale

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwarmGlobalPathList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.guard_drone_id is None:
        self.guard_drone_id = 0
      if self.path_num is None:
        self.path_num = 0
      if self.swarm_global_path_x is None:
        self.swarm_global_path_x = []
      if self.swarm_global_path_y is None:
        self.swarm_global_path_y = []
      if self.swarm_global_path_z is None:
        self.swarm_global_path_z = []
      if self.swarm_global_path_scale is None:
        self.swarm_global_path_scale = []
    else:
      self.guard_drone_id = 0
      self.path_num = 0
      self.swarm_global_path_x = []
      self.swarm_global_path_y = []
      self.swarm_global_path_z = []
      self.swarm_global_path_scale = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.guard_drone_id, _x.path_num))
      length = len(self.swarm_global_path_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.swarm_global_path_x))
      length = len(self.swarm_global_path_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.swarm_global_path_y))
      length = len(self.swarm_global_path_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.swarm_global_path_z))
      length = len(self.swarm_global_path_scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.swarm_global_path_scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.guard_drone_id, _x.path_num,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_scale = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h().pack(_x.guard_drone_id, _x.path_num))
      length = len(self.swarm_global_path_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.swarm_global_path_x.tostring())
      length = len(self.swarm_global_path_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.swarm_global_path_y.tostring())
      length = len(self.swarm_global_path_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.swarm_global_path_z.tostring())
      length = len(self.swarm_global_path_scale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.swarm_global_path_scale.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.guard_drone_id, _x.path_num,) = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swarm_global_path_scale = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
