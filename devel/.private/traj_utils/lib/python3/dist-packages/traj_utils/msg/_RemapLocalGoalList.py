# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from traj_utils/RemapLocalGoalList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RemapLocalGoalList(genpy.Message):
  _md5sum = "94d1962f185de6a5a18e3c7557706328"
  _type = "traj_utils/RemapLocalGoalList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 guard_drone_id

uint32[] assignment

float32[] remap_lg_pos_x
float32[] remap_lg_pos_y
float32[] remap_lg_pos_z

float32[] remap_lg_vel_x
float32[] remap_lg_vel_y
float32[] remap_lg_vel_z"""
  __slots__ = ['guard_drone_id','assignment','remap_lg_pos_x','remap_lg_pos_y','remap_lg_pos_z','remap_lg_vel_x','remap_lg_vel_y','remap_lg_vel_z']
  _slot_types = ['int16','uint32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       guard_drone_id,assignment,remap_lg_pos_x,remap_lg_pos_y,remap_lg_pos_z,remap_lg_vel_x,remap_lg_vel_y,remap_lg_vel_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RemapLocalGoalList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.guard_drone_id is None:
        self.guard_drone_id = 0
      if self.assignment is None:
        self.assignment = []
      if self.remap_lg_pos_x is None:
        self.remap_lg_pos_x = []
      if self.remap_lg_pos_y is None:
        self.remap_lg_pos_y = []
      if self.remap_lg_pos_z is None:
        self.remap_lg_pos_z = []
      if self.remap_lg_vel_x is None:
        self.remap_lg_vel_x = []
      if self.remap_lg_vel_y is None:
        self.remap_lg_vel_y = []
      if self.remap_lg_vel_z is None:
        self.remap_lg_vel_z = []
    else:
      self.guard_drone_id = 0
      self.assignment = []
      self.remap_lg_pos_x = []
      self.remap_lg_pos_y = []
      self.remap_lg_pos_z = []
      self.remap_lg_vel_x = []
      self.remap_lg_vel_y = []
      self.remap_lg_vel_z = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.guard_drone_id
      buff.write(_get_struct_h().pack(_x))
      length = len(self.assignment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.assignment))
      length = len(self.remap_lg_pos_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_pos_x))
      length = len(self.remap_lg_pos_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_pos_y))
      length = len(self.remap_lg_pos_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_pos_z))
      length = len(self.remap_lg_vel_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_vel_x))
      length = len(self.remap_lg_vel_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_vel_y))
      length = len(self.remap_lg_vel_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.remap_lg_vel_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.guard_drone_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.assignment = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_z = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.guard_drone_id
      buff.write(_get_struct_h().pack(_x))
      length = len(self.assignment)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.assignment.tostring())
      length = len(self.remap_lg_pos_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_pos_x.tostring())
      length = len(self.remap_lg_pos_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_pos_y.tostring())
      length = len(self.remap_lg_pos_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_pos_z.tostring())
      length = len(self.remap_lg_vel_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_vel_x.tostring())
      length = len(self.remap_lg_vel_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_vel_y.tostring())
      length = len(self.remap_lg_vel_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.remap_lg_vel_z.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      (self.guard_drone_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.assignment = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_pos_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.remap_lg_vel_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
