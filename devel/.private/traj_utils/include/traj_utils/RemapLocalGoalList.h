// Generated by gencpp from file traj_utils/RemapLocalGoalList.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_REMAPLOCALGOALLIST_H
#define TRAJ_UTILS_MESSAGE_REMAPLOCALGOALLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct RemapLocalGoalList_
{
  typedef RemapLocalGoalList_<ContainerAllocator> Type;

  RemapLocalGoalList_()
    : guard_drone_id(0)
    , assignment()
    , remap_lg_pos_x()
    , remap_lg_pos_y()
    , remap_lg_pos_z()
    , remap_lg_vel_x()
    , remap_lg_vel_y()
    , remap_lg_vel_z()  {
    }
  RemapLocalGoalList_(const ContainerAllocator& _alloc)
    : guard_drone_id(0)
    , assignment(_alloc)
    , remap_lg_pos_x(_alloc)
    , remap_lg_pos_y(_alloc)
    , remap_lg_pos_z(_alloc)
    , remap_lg_vel_x(_alloc)
    , remap_lg_vel_y(_alloc)
    , remap_lg_vel_z(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _guard_drone_id_type;
  _guard_drone_id_type guard_drone_id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _assignment_type;
  _assignment_type assignment;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_pos_x_type;
  _remap_lg_pos_x_type remap_lg_pos_x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_pos_y_type;
  _remap_lg_pos_y_type remap_lg_pos_y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_pos_z_type;
  _remap_lg_pos_z_type remap_lg_pos_z;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_vel_x_type;
  _remap_lg_vel_x_type remap_lg_vel_x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_vel_y_type;
  _remap_lg_vel_y_type remap_lg_vel_y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _remap_lg_vel_z_type;
  _remap_lg_vel_z_type remap_lg_vel_z;





  typedef boost::shared_ptr< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> const> ConstPtr;

}; // struct RemapLocalGoalList_

typedef ::traj_utils::RemapLocalGoalList_<std::allocator<void> > RemapLocalGoalList;

typedef boost::shared_ptr< ::traj_utils::RemapLocalGoalList > RemapLocalGoalListPtr;
typedef boost::shared_ptr< ::traj_utils::RemapLocalGoalList const> RemapLocalGoalListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::RemapLocalGoalList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::RemapLocalGoalList_<ContainerAllocator1> & lhs, const ::traj_utils::RemapLocalGoalList_<ContainerAllocator2> & rhs)
{
  return lhs.guard_drone_id == rhs.guard_drone_id &&
    lhs.assignment == rhs.assignment &&
    lhs.remap_lg_pos_x == rhs.remap_lg_pos_x &&
    lhs.remap_lg_pos_y == rhs.remap_lg_pos_y &&
    lhs.remap_lg_pos_z == rhs.remap_lg_pos_z &&
    lhs.remap_lg_vel_x == rhs.remap_lg_vel_x &&
    lhs.remap_lg_vel_y == rhs.remap_lg_vel_y &&
    lhs.remap_lg_vel_z == rhs.remap_lg_vel_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::RemapLocalGoalList_<ContainerAllocator1> & lhs, const ::traj_utils::RemapLocalGoalList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94d1962f185de6a5a18e3c7557706328";
  }

  static const char* value(const ::traj_utils::RemapLocalGoalList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94d1962f185de6a5ULL;
  static const uint64_t static_value2 = 0xa18e3c7557706328ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/RemapLocalGoalList";
  }

  static const char* value(const ::traj_utils::RemapLocalGoalList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 guard_drone_id\n"
"\n"
"uint32[] assignment\n"
"\n"
"float32[] remap_lg_pos_x\n"
"float32[] remap_lg_pos_y\n"
"float32[] remap_lg_pos_z\n"
"\n"
"float32[] remap_lg_vel_x\n"
"float32[] remap_lg_vel_y\n"
"float32[] remap_lg_vel_z\n"
;
  }

  static const char* value(const ::traj_utils::RemapLocalGoalList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guard_drone_id);
      stream.next(m.assignment);
      stream.next(m.remap_lg_pos_x);
      stream.next(m.remap_lg_pos_y);
      stream.next(m.remap_lg_pos_z);
      stream.next(m.remap_lg_vel_x);
      stream.next(m.remap_lg_vel_y);
      stream.next(m.remap_lg_vel_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemapLocalGoalList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::RemapLocalGoalList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::RemapLocalGoalList_<ContainerAllocator>& v)
  {
    s << indent << "guard_drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.guard_drone_id);
    s << indent << "assignment[]" << std::endl;
    for (size_t i = 0; i < v.assignment.size(); ++i)
    {
      s << indent << "  assignment[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.assignment[i]);
    }
    s << indent << "remap_lg_pos_x[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_pos_x.size(); ++i)
    {
      s << indent << "  remap_lg_pos_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_pos_x[i]);
    }
    s << indent << "remap_lg_pos_y[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_pos_y.size(); ++i)
    {
      s << indent << "  remap_lg_pos_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_pos_y[i]);
    }
    s << indent << "remap_lg_pos_z[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_pos_z.size(); ++i)
    {
      s << indent << "  remap_lg_pos_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_pos_z[i]);
    }
    s << indent << "remap_lg_vel_x[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_vel_x.size(); ++i)
    {
      s << indent << "  remap_lg_vel_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_vel_x[i]);
    }
    s << indent << "remap_lg_vel_y[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_vel_y.size(); ++i)
    {
      s << indent << "  remap_lg_vel_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_vel_y[i]);
    }
    s << indent << "remap_lg_vel_z[]" << std::endl;
    for (size_t i = 0; i < v.remap_lg_vel_z.size(); ++i)
    {
      s << indent << "  remap_lg_vel_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.remap_lg_vel_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_REMAPLOCALGOALLIST_H
